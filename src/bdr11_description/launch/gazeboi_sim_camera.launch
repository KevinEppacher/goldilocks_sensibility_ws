<?xml version="1.0"?>
<launch>
    <!-- Arguments for both robots -->
    <arg name="transmission_hw_interface" default="hardware_interface/EffortJointInterface" 
        doc="The hardware_interface to expose for each joint in the simulated robot (one of: [PositionJointInterface, VelocityJointInterface, EffortJointInterface])"/>

    <!-- Arguments for robot namespaces -->
    <arg name="ur10_namespace" default="ur10_" doc="Namespace for the UR10 robot."/>
    <arg name="quantec_namespace" default="quantec_" doc="Namespace for the Quantec robot."/>

    <!-- Controller configuration -->
    <arg name="controller_config_file" default="$(find bdr11_description)/config/robot_controllers.yaml" 
        doc="Config file used for defining the ROS-Control controllers."/>
    <arg name="controllers" default="joint_state_controller eff_joint_traj_controller" 
        doc="Controllers that are activated by default."/>
    <arg name="stopped_controllers" default="joint_group_eff_controller" 
        doc="Controllers that are initially loaded, but not started."/>

    <!-- Robot state publisher configuration -->
    <arg name="tf_prefix" default="" doc="tf_prefix used for the robot."/>
    <arg name="tf_pub_rate" default="125" doc="Rate at which robot_state_publisher should publish transforms."/>

    <!-- Position arguments for both robots -->
    <arg name="ur10_x" default="0" doc="X position of the UR10 robot in Gazebo."/>
    <arg name="ur10_y" default="0" doc="Y position of the UR10 robot in Gazebo."/>
    <arg name="ur10_z" default="0" doc="Z position of the UR10 robot in Gazebo."/>
    <arg name="quantec_x" default="-1" doc="X position of the Quantec robot in Gazebo."/>
    <arg name="quantec_y" default="0.4" doc="Y position of the Quantec robot in Gazebo."/>
    <arg name="quantec_z" default="0" doc="Z position of the Quantec robot in Gazebo."/>

    <!-- Gazebo parameters -->
    <arg name="gazebo_world" default="worlds/empty.world" doc="The '.world' file to load in Gazebo." />
    <arg name="gui" default="true" doc="If true, Gazebo UI is started. If false, only start Gazebo server." />
    <arg name="paused" default="true" doc="If true, start Gazebo in paused mode. If false, start simulation as soon as Gazebo has loaded." />
    <arg name="robot_description_param_name" default="robot_description" doc="Name of the parameter which contains the robot description (ie: URDF) which should be spawned into Gazebo." />
    <arg name="start_gazebo" default="true" doc="If true, Gazebo will be started. If false, Gazebo will be assumed to have been started elsewhere." />

    <!-- Initial configuration for UR10 -->
    <arg name="ur10_initial_joint_positions" 
         default=" -J ur10_shoulder_pan_joint -1.57 -J ur10_shoulder_lift_joint -1.57 -J ur10_elbow_joint -0.733 -J ur10_wrist_1_joint 3.14 -J ur10_wrist_2_joint -1.57 -J ur10_wrist_3_joint 0.0 -unpause" 
         doc="Initial joint configuration of the UR10 robot"/>

    <!-- Initial configuration for Quantec -->
    <arg name="quantec_initial_joint_positions" 
         default=" -J quantec_joint_1 0.0 -J quantec_joint_2 -1.57 -J quantec_joint_3 0.0 -J quantec_joint_4 -1.57 -J quantec_joint_5 0.0 -J quantec_joint_6 0.0 -unpause" 
         doc="Initial joint configuration of the Quantec robot"/>

    <!-- Robot descriptions -->
    <param name="robot_description" command="$(find xacro)/xacro --inorder $(find bdr11_description)/urdf/bdr11.urdf.xacro
        transmission_hw_interface:=$(arg transmission_hw_interface)" />

    <!-- Load controller settings -->
    <rosparam file="$(arg controller_config_file)" command="load"/>

    <!-- Robot state publisher for UR10 -->
    <node pkg="robot_state_publisher" type="robot_state_publisher" name="ur10_robot_state_publisher" ns="$(arg ur10_namespace)">
      <param name="publish_frequency" type="double" value="$(arg tf_pub_rate)" />
      <param name="tf_prefix" value="$(arg ur10_namespace)" />
    </node>

    <!-- Robot state publisher for Quantec -->
    <node pkg="robot_state_publisher" type="robot_state_publisher" name="quantec_robot_state_publisher" ns="$(arg quantec_namespace)">
      <param name="publish_frequency" type="double" value="$(arg tf_pub_rate)" />
      <param name="tf_prefix" value="$(arg quantec_namespace)" />
    </node>

    <!-- Load and start the controllers listed in the 'controllers' arg for UR10 -->
    <node name="ur10_ros_control_controller_spawner" pkg="controller_manager" type="spawner"
      ns="$(arg ur10_namespace)" args="$(arg controllers)" output="screen" respawn="false" />

    <!-- Load and start the controllers listed in the 'controllers' arg for Quantec -->
    <node name="quantec_ros_control_controller_spawner" pkg="controller_manager" type="spawner"
      ns="$(arg quantec_namespace)" args="$(arg controllers)" output="screen" respawn="false" />

    <!-- Load other controllers, but do not start them for UR10 -->
    <node name="ur10_ros_control_stopped_spawner" pkg="controller_manager" type="spawner"
      ns="$(arg ur10_namespace)" args="--stopped $(arg stopped_controllers)" output="screen" respawn="false" />

    <!-- Load other controllers, but do not start them for Quantec -->
    <node name="quantec_ros_control_stopped_spawner" pkg="controller_manager" type="spawner"
      ns="$(arg quantec_namespace)" args="--stopped $(arg stopped_controllers)" output="screen" respawn="false" />

    <!-- remap controller -->
    <include file="$(find bdr11_moveit_config)/launch/moveit_planning_execution.launch" >
        <arg name="sim" value="true" />
    </include>

    <include file="$(find bdr11_moveit_config)/launch/moveit_rviz.launch" >
        <arg name="rviz_config" value="$(find tars_robot)/config/config.rviz" />
    </include>

    <!-- Start Gazebo and load the empty world if requested to do so -->
    <include file="$(find gazebo_ros)/launch/empty_world.launch" if="$(arg start_gazebo)">
      <arg name="world_name" value="$(arg gazebo_world)"/>
      <arg name="paused" value="$(arg paused)"/>
      <arg name="gui" value="$(arg gui)"/>
    </include>

    <!-- Spawn the UR10 robot -->
    <node name="spawn_ur10_gazebo_model" pkg="gazebo_ros" type="spawn_model"
      args="-urdf -param $(arg robot_description_param_name) -model $(arg ur10_namespace) -x $(arg ur10_x) -y $(arg ur10_y) -z $(arg ur10_z) $(arg ur10_initial_joint_positions)"
      output="screen" respawn="false" />

    <!-- Spawn the Quantec robot -->
    <!-- <node name="spawn_quantec_gazebo_model" pkg="gazebo_ros" type="spawn_model"
      args="-urdf -param $(arg robot_description_param_name) -model $(arg quantec_namespace) -x $(arg quantec_x) -y $(arg quantec_y) -z $(arg quantec_z) $(arg quantec_initial_joint_positions)"
      output="screen" respawn="false" /> -->

    <!-- spawn him -->
    <!-- <node name="hmi" pkg="hmi" type="hmi" output="screen" /> -->

    <!-- Visualization of the use_gui for playing with joint-->
    <!-- <arg name="use_gui" default="true" /> -->
    <!-- <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher"  output="screen" unless="$(arg use_gui)" /> -->
    <!-- <node name="joint_state_publisher_gui" pkg="joint_state_publisher_gui" type="joint_state_publisher_gui"  output="screen" if="$(arg use_gui)"/>     -->
</launch>